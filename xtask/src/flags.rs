//! CLI flags for `cargo xtask`
use std::path::PathBuf;

xflags::xflags! {
    src "./src/flags.rs"

    /// Custom build commands for zellij
    cmd xtask {
        default cmd help {
            /// Print help information
            optional -h, --help
        }

        /// Run `cargo clippy` on all crates
        cmd clippy {}

        /// Run `cargo fmt` on all crates
        cmd format {}

        /// Sequentially call: format, build, test, clippy
        cmd make {
            /// Build in release mode without debug symbols
            optional -r, --release
        }

        /// Generate a runnable `zellij` executable with plugins bundled
        cmd install
            required destination: PathBuf
        {}

        /// Build the application and all plugins
        cmd build {
            /// Build in release mode without debug symbols
            optional -r, --release
            /// Build only the plugins
            optional --plugins-only
            /// Build everything except the plugins
            optional --no-plugins
        }

        /// Package zellij for distribution (result found in ./target/dist)
        cmd dist {}

        /// Run application tests
        cmd test {}
    }
}
// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xtask {
    pub subcommand: XtaskCmd,
}

#[derive(Debug)]
pub enum XtaskCmd {
    Help(Help),
    Clippy(Clippy),
    Format(Format),
    Make(Make),
    Install(Install),
    Build(Build),
    Dist(Dist),
    Test(Test),
}

#[derive(Debug)]
pub struct Help {
    pub help: bool,
}

#[derive(Debug)]
pub struct Clippy;

#[derive(Debug)]
pub struct Format;

#[derive(Debug)]
pub struct Make {
    pub release: bool,
}

#[derive(Debug)]
pub struct Install {
    pub destination: PathBuf,
}

#[derive(Debug)]
pub struct Build {
    pub release: bool,
    pub plugins_only: bool,
    pub no_plugins: bool,
}

#[derive(Debug)]
pub struct Dist;

#[derive(Debug)]
pub struct Test;

impl Xtask {
    pub const HELP: &'static str = Self::HELP_;

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
